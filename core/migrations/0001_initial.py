# Generated by Django 4.2 on 2023-07-25 09:25

import core.managers
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("Репетитор", "Репетитор"),
                            ("Студент", "Студент"),
                            ("Админ", "Админ"),
                        ],
                        max_length=20,
                        verbose_name="Тип пользователя",
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Указывает, следует ли рассматривать этого пользователя как суперпользователя.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Дата обновлении"
                    ),
                ),
                (
                    "activation_code",
                    models.CharField(blank=True, max_length=17, null=True),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", core.managers.MyAccountManager()),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=100, verbose_name="Имя"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=100, verbose_name="Фамилия"),
                ),
                (
                    "phone",
                    models.CharField(
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Номер телефона только в формате: +996 xxx xxx xxx",
                                regex="^\\+996 \\d{3} \\d{3} \\d{3}$",
                            )
                        ],
                        verbose_name="Номер телефона",
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, verbose_name="Email"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Ученик",
                "verbose_name_plural": "Ученики",
                "ordering": ["first_name"],
            },
        ),
        migrations.CreateModel(
            name="Specialist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=100, verbose_name="Имя"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=100, verbose_name="Фамилия"),
                ),
                ("age", models.PositiveIntegerField(verbose_name="Возраст")),
                (
                    "phone",
                    models.CharField(
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Номер телефона только в формате: +996 xxx xxx xxx",
                                regex="^\\+996 \\d{3} \\d{3} \\d{3}$",
                            )
                        ],
                        verbose_name="Номер телефона",
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, verbose_name="Email"),
                ),
                ("services", models.TextField(verbose_name="Услуги")),
                (
                    "rating",
                    models.FloatField(default=0, verbose_name="Рейтинг"),
                ),
                ("education", models.TextField(verbose_name="Образование")),
                (
                    "consultation_price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        verbose_name="Стоимость почасовой консультации",
                    ),
                ),
                ("instagram", models.TextField(blank=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Репетитор",
                "verbose_name_plural": "Репетиторы",
                "ordering": ["first_name"],
            },
        ),
        migrations.CreateModel(
            name="ServiceCardIndividual",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Название"),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to="service_card", verbose_name="Картинка"
                    ),
                ),
                ("description", models.TextField(verbose_name="Описание")),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="Цена"
                    ),
                ),
                (
                    "completed",
                    models.BooleanField(default=False, verbose_name="Завершен"),
                ),
                (
                    "completed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="completed_card_individual",
                        to="core.specialist",
                        verbose_name="Завершено репетитором",
                    ),
                ),
                (
                    "specialist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.specialist",
                        verbose_name="Репетитор",
                    ),
                ),
            ],
            options={
                "verbose_name": "Индивидуальное занятие",
                "verbose_name_plural": "Индивидуальные занятия",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ServiceCardGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Название"),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to="service_card", verbose_name="Картинка"
                    ),
                ),
                ("date", models.DateTimeField(verbose_name="Дата")),
                ("description", models.TextField(verbose_name="Описание")),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="Цена"
                    ),
                ),
                (
                    "completed",
                    models.BooleanField(default=False, verbose_name="Завершен"),
                ),
                (
                    "completed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="completed_card_group",
                        to="core.specialist",
                        verbose_name="Завершено репетитором",
                    ),
                ),
                (
                    "specialist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.specialist",
                        verbose_name="Репетитор",
                    ),
                ),
            ],
            options={
                "verbose_name": "Групповое занятие",
                "verbose_name_plural": "Групповые занятия",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ReviewIndividual",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rating", models.FloatField()),
                (
                    "completed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.student",
                        verbose_name="Прошедший курс",
                    ),
                ),
                (
                    "service_card",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.servicecardindividual",
                        verbose_name="Карточка товара",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReviewGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rating", models.FloatField()),
                (
                    "completed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.student",
                        verbose_name="Прошедший курс",
                    ),
                ),
                (
                    "service_card_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.servicecardgroup",
                        verbose_name="Карточка товара",
                    ),
                ),
            ],
        ),
    ]
